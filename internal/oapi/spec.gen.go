// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

