// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

