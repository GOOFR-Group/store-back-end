// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

