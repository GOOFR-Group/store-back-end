// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lP+oQMbz/fP/AwAA//+riA5oDKIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

