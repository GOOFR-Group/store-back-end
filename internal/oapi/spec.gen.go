// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//xOhs44KowAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

