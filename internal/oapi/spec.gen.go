// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

