// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

