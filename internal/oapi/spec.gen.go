// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

