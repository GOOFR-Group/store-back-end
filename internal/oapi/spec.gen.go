// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

