// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

