// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4+Xx5f8BAAD//4JvzpBdnwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

