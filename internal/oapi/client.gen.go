// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PutAccess request with any body
	PutAccessWithBody(ctx context.Context, params *PutAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccess(ctx context.Context, params *PutAccessParams, body PutAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddBalance request
	GetAddBalance(ctx context.Context, params *GetAddBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddress request
	GetAddress(ctx context.Context, params *GetAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAddress request with any body
	PutAddressWithBody(ctx context.Context, params *PutAddressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAddress(ctx context.Context, params *PutAddressParams, body PutAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCart request
	DeleteCart(ctx context.Context, params *DeleteCartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCart request
	GetCart(ctx context.Context, params *GetCartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCart request
	PostCart(ctx context.Context, params *PostCartParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCartPurchase request
	GetCartPurchase(ctx context.Context, params *GetCartPurchaseParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteClient request
	DeleteClient(ctx context.Context, params *DeleteClientParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClient request
	GetClient(ctx context.Context, params *GetClientParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutClient request with any body
	PutClientWithBody(ctx context.Context, params *PutClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutClient(ctx context.Context, params *PutClientParams, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGame request
	DeleteGame(ctx context.Context, params *DeleteGameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGame request
	GetGame(ctx context.Context, params *GetGameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGame request with any body
	PostGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGame(ctx context.Context, body PostGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGame request with any body
	PutGameWithBody(ctx context.Context, params *PutGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGame(ctx context.Context, params *PutGameParams, body PutGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGameImage request
	DeleteGameImage(ctx context.Context, params *DeleteGameImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGameImage request
	GetGameImage(ctx context.Context, params *GetGameImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGameImage request
	PostGameImage(ctx context.Context, params *PostGameImageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGameReviews request
	GetGameReviews(ctx context.Context, params *GetGameReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGameTag request
	DeleteGameTag(ctx context.Context, params *DeleteGameTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGameTag request
	GetGameTag(ctx context.Context, params *GetGameTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGameTag request
	PostGameTag(ctx context.Context, params *PostGameTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoice request
	GetInvoice(ctx context.Context, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLibrary request
	GetLibrary(ctx context.Context, params *GetLibraryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLogin request with any body
	PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewStore request
	GetNewStore(ctx context.Context, params *GetNewStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNewsletter request
	DeleteNewsletter(ctx context.Context, params *DeleteNewsletterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewsletter request
	GetNewsletter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNewsletter request
	PostNewsletter(ctx context.Context, params *PostNewsletterParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNoteworthyStore request
	GetNoteworthyStore(ctx context.Context, params *GetNoteworthyStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePublisher request
	DeletePublisher(ctx context.Context, params *DeletePublisherParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisher request
	GetPublisher(ctx context.Context, params *GetPublisherParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPublisher request with any body
	PostPublisherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPublisher(ctx context.Context, body PostPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPublisher request with any body
	PutPublisherWithBody(ctx context.Context, params *PutPublisherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPublisher(ctx context.Context, params *PutPublisherParams, body PutPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPublisherGames request
	GetPublisherGames(ctx context.Context, params *GetPublisherGamesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegister request with any body
	PostRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegister(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReview request
	DeleteReview(ctx context.Context, params *DeleteReviewParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostReview request with any body
	PostReviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostReview(ctx context.Context, body PostReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutReview request with any body
	PutReviewWithBody(ctx context.Context, params *PutReviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutReview(ctx context.Context, params *PutReviewParams, body PutReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchGame request
	GetSearchGame(ctx context.Context, params *GetSearchGameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchHistory request
	GetSearchHistory(ctx context.Context, params *GetSearchHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSearchHistory request
	PostSearchHistory(ctx context.Context, params *PostSearchHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSearchTag request
	GetSearchTag(ctx context.Context, params *GetSearchTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTag request
	DeleteTag(ctx context.Context, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTag request
	GetTag(ctx context.Context, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTag request with any body
	PostTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTag(ctx context.Context, body PostTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTag request with any body
	PutTagWithBody(ctx context.Context, params *PutTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTag(ctx context.Context, params *PutTagParams, body PutTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopReviews request
	GetTopReviews(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWallet request
	GetWallet(ctx context.Context, params *GetWalletParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWallet request with any body
	PutWalletWithBody(ctx context.Context, params *PutWalletParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWallet(ctx context.Context, params *PutWalletParams, body PutWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWishlist request
	DeleteWishlist(ctx context.Context, params *DeleteWishlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWishlist request
	GetWishlist(ctx context.Context, params *GetWishlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWishlist request
	PostWishlist(ctx context.Context, params *PostWishlistParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetYourStore request
	GetYourStore(ctx context.Context, params *GetYourStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PutAccessWithBody(ctx context.Context, params *PutAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccessRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccess(ctx context.Context, params *PutAccessParams, body PutAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccessRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddBalance(ctx context.Context, params *GetAddBalanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddBalanceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddress(ctx context.Context, params *GetAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddressRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAddressWithBody(ctx context.Context, params *PutAddressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAddressRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAddress(ctx context.Context, params *PutAddressParams, body PutAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAddressRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCart(ctx context.Context, params *DeleteCartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCart(ctx context.Context, params *GetCartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCart(ctx context.Context, params *PostCartParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCartRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCartPurchase(ctx context.Context, params *GetCartPurchaseParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCartPurchaseRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClient(ctx context.Context, params *DeleteClientParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteClientRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClient(ctx context.Context, params *GetClientParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClientRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClientWithBody(ctx context.Context, params *PutClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutClient(ctx context.Context, params *PutClientParams, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutClientRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGame(ctx context.Context, params *DeleteGameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGame(ctx context.Context, params *GetGameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGame(ctx context.Context, body PostGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGameWithBody(ctx context.Context, params *PutGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGameRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGame(ctx context.Context, params *PutGameParams, body PutGameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGameRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGameImage(ctx context.Context, params *DeleteGameImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGameImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGameImage(ctx context.Context, params *GetGameImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGameImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGameImage(ctx context.Context, params *PostGameImageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameImageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGameReviews(ctx context.Context, params *GetGameReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGameReviewsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGameTag(ctx context.Context, params *DeleteGameTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGameTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGameTag(ctx context.Context, params *GetGameTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGameTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGameTag(ctx context.Context, params *PostGameTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGameTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoice(ctx context.Context, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLibrary(ctx context.Context, params *GetLibraryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLibraryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLogin(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewStore(ctx context.Context, params *GetNewStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewStoreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNewsletter(ctx context.Context, params *DeleteNewsletterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNewsletterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewsletter(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewsletterRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewsletter(ctx context.Context, params *PostNewsletterParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewsletterRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNoteworthyStore(ctx context.Context, params *GetNoteworthyStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNoteworthyStoreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePublisher(ctx context.Context, params *DeletePublisherParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePublisherRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisher(ctx context.Context, params *GetPublisherParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPublisher(ctx context.Context, body PostPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPublisherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublisherWithBody(ctx context.Context, params *PutPublisherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublisherRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPublisher(ctx context.Context, params *PutPublisherParams, body PutPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPublisherRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublisherGames(ctx context.Context, params *GetPublisherGamesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPublisherGamesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegister(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReview(ctx context.Context, params *DeleteReviewParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReviewRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReviewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReviewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostReview(ctx context.Context, body PostReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostReviewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReviewWithBody(ctx context.Context, params *PutReviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReviewRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutReview(ctx context.Context, params *PutReviewParams, body PutReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutReviewRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchGame(ctx context.Context, params *GetSearchGameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchGameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchHistory(ctx context.Context, params *GetSearchHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSearchHistory(ctx context.Context, params *PostSearchHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSearchHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSearchTag(ctx context.Context, params *GetSearchTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSearchTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTag(ctx context.Context, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTag(ctx context.Context, params *GetTagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTag(ctx context.Context, body PostTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTagWithBody(ctx context.Context, params *PutTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTagRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTag(ctx context.Context, params *PutTagParams, body PutTagJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTagRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopReviews(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopReviewsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWallet(ctx context.Context, params *GetWalletParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWalletRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWalletWithBody(ctx context.Context, params *PutWalletParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWalletRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWallet(ctx context.Context, params *PutWalletParams, body PutWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWalletRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWishlist(ctx context.Context, params *DeleteWishlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWishlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWishlist(ctx context.Context, params *GetWishlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWishlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWishlist(ctx context.Context, params *PostWishlistParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWishlistRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetYourStore(ctx context.Context, params *GetYourStoreParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetYourStoreRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPutAccessRequest calls the generic PutAccess builder with application/json body
func NewPutAccessRequest(server string, params *PutAccessParams, body PutAccessJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccessRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutAccessRequestWithBody generates requests for PutAccess with any type of body
func NewPutAccessRequestWithBody(server string, params *PutAccessParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/access")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientID", runtime.ParamLocationQuery, params.ClientID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAddBalanceRequest generates requests for GetAddBalance
func NewGetAddBalanceRequest(server string, params *GetAddBalanceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addBalance")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, params.Amount); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAddressRequest generates requests for GetAddress
func NewGetAddressRequest(server string, params *GetAddressParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAddressRequest calls the generic PutAddress builder with application/json body
func NewPutAddressRequest(server string, params *PutAddressParams, body PutAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAddressRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutAddressRequestWithBody generates requests for PutAddress with any type of body
func NewPutAddressRequestWithBody(server string, params *PutAddressParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCartRequest generates requests for DeleteCart
func NewDeleteCartRequest(server string, params *DeleteCartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientID", runtime.ParamLocationQuery, params.ClientID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.GameID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, *params.GameID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCartRequest generates requests for GetCart
func NewGetCartRequest(server string, params *GetCartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCartRequest generates requests for PostCart
func NewPostCartRequest(server string, params *PostCartParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientID", runtime.ParamLocationQuery, params.ClientID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, params.GameID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCartPurchaseRequest generates requests for GetCartPurchase
func NewGetCartPurchaseRequest(server string, params *GetCartPurchaseParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cartPurchase")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClientRequest generates requests for DeleteClient
func NewDeleteClientRequest(server string, params *DeleteClientParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientRequest generates requests for GetClient
func NewGetClientRequest(server string, params *GetClientParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutClientRequest calls the generic PutClient builder with application/json body
func NewPutClientRequest(server string, params *PutClientParams, body PutClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutClientRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutClientRequestWithBody generates requests for PutClient with any type of body
func NewPutClientRequestWithBody(server string, params *PutClientParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGameRequest generates requests for DeleteGame
func NewDeleteGameRequest(server string, params *DeleteGameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGameRequest generates requests for GetGame
func NewGetGameRequest(server string, params *GetGameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGameRequest calls the generic PostGame builder with application/json body
func NewPostGameRequest(server string, body PostGameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGameRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGameRequestWithBody generates requests for PostGame with any type of body
func NewPostGameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutGameRequest calls the generic PutGame builder with application/json body
func NewPutGameRequest(server string, params *PutGameParams, body PutGameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGameRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutGameRequestWithBody generates requests for PutGame with any type of body
func NewPutGameRequestWithBody(server string, params *PutGameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/game")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGameImageRequest generates requests for DeleteGameImage
func NewDeleteGameImageRequest(server string, params *DeleteGameImageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gameImage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGameImageRequest generates requests for GetGameImage
func NewGetGameImageRequest(server string, params *GetGameImageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gameImage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGameImageRequest generates requests for PostGameImage
func NewPostGameImageRequest(server string, params *PostGameImageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gameImage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, params.GameID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "image", runtime.ParamLocationQuery, params.Image); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGameReviewsRequest generates requests for GetGameReviews
func NewGetGameReviewsRequest(server string, params *GetGameReviewsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gameReviews")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteGameTagRequest generates requests for DeleteGameTag
func NewDeleteGameTagRequest(server string, params *DeleteGameTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gameTag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, params.GameID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagID", runtime.ParamLocationQuery, params.TagID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGameTagRequest generates requests for GetGameTag
func NewGetGameTagRequest(server string, params *GetGameTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gameTag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGameTagRequest generates requests for PostGameTag
func NewPostGameTagRequest(server string, params *PostGameTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gameTag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, params.GameID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tagID", runtime.ParamLocationQuery, params.TagID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceRequest generates requests for GetInvoice
func NewGetInvoiceRequest(server string, params *GetInvoiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/invoice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLibraryRequest generates requests for GetLibrary
func NewGetLibraryRequest(server string, params *GetLibraryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/library")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLoginRequest calls the generic PostLogin builder with application/json body
func NewPostLoginRequest(server string, body PostLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLoginRequestWithBody generates requests for PostLogin with any type of body
func NewPostLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewStoreRequest generates requests for GetNewStore
func NewGetNewStoreRequest(server string, params *GetNewStoreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newStore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ids != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNewsletterRequest generates requests for DeleteNewsletter
func NewDeleteNewsletterRequest(server string, params *DeleteNewsletterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNewsletterRequest generates requests for GetNewsletter
func NewGetNewsletterRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNewsletterRequest generates requests for PostNewsletter
func NewPostNewsletterRequest(server string, params *PostNewsletterParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNoteworthyStoreRequest generates requests for GetNoteworthyStore
func NewGetNoteworthyStoreRequest(server string, params *GetNoteworthyStoreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/noteworthyStore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ids != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePublisherRequest generates requests for DeletePublisher
func NewDeletePublisherRequest(server string, params *DeletePublisherParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublisherRequest generates requests for GetPublisher
func NewGetPublisherRequest(server string, params *GetPublisherParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPublisherRequest calls the generic PostPublisher builder with application/json body
func NewPostPublisherRequest(server string, body PostPublisherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPublisherRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPublisherRequestWithBody generates requests for PostPublisher with any type of body
func NewPostPublisherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutPublisherRequest calls the generic PutPublisher builder with application/json body
func NewPutPublisherRequest(server string, params *PutPublisherParams, body PutPublisherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPublisherRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutPublisherRequestWithBody generates requests for PutPublisher with any type of body
func NewPutPublisherRequestWithBody(server string, params *PutPublisherParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPublisherGamesRequest generates requests for GetPublisherGames
func NewGetPublisherGamesRequest(server string, params *GetPublisherGamesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/publisherGames")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRegisterRequest calls the generic PostRegister builder with application/json body
func NewPostRegisterRequest(server string, body PostRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRegisterRequestWithBody generates requests for PostRegister with any type of body
func NewPostRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteReviewRequest generates requests for DeleteReview
func NewDeleteReviewRequest(server string, params *DeleteReviewParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/review")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostReviewRequest calls the generic PostReview builder with application/json body
func NewPostReviewRequest(server string, body PostReviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostReviewRequestWithBody(server, "application/json", bodyReader)
}

// NewPostReviewRequestWithBody generates requests for PostReview with any type of body
func NewPostReviewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/review")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutReviewRequest calls the generic PutReview builder with application/json body
func NewPutReviewRequest(server string, params *PutReviewParams, body PutReviewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutReviewRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutReviewRequestWithBody generates requests for PutReview with any type of body
func NewPutReviewRequestWithBody(server string, params *PutReviewParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/review")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSearchGameRequest generates requests for GetSearchGame
func NewGetSearchGameRequest(server string, params *GetSearchGameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchGame")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, params.Search); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchHistoryRequest generates requests for GetSearchHistory
func NewGetSearchHistoryRequest(server string, params *GetSearchHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchHistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSearchHistoryRequest generates requests for PostSearchHistory
func NewPostSearchHistoryRequest(server string, params *PostSearchHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchHistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientID", runtime.ParamLocationQuery, params.ClientID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, params.GameID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSearchTagRequest generates requests for GetSearchTag
func NewGetSearchTagRequest(server string, params *GetSearchTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/searchTag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, params.Search); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTagRequest generates requests for DeleteTag
func NewDeleteTagRequest(server string, params *DeleteTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagRequest generates requests for GetTag
func NewGetTagRequest(server string, params *GetTagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTagRequest calls the generic PostTag builder with application/json body
func NewPostTagRequest(server string, body PostTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTagRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTagRequestWithBody generates requests for PostTag with any type of body
func NewPostTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTagRequest calls the generic PutTag builder with application/json body
func NewPutTagRequest(server string, params *PutTagParams, body PutTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTagRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutTagRequestWithBody generates requests for PutTag with any type of body
func NewPutTagRequestWithBody(server string, params *PutTagParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTopReviewsRequest generates requests for GetTopReviews
func NewGetTopReviewsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/topReviews")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWalletRequest generates requests for GetWallet
func NewGetWalletRequest(server string, params *GetWalletParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wallet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWalletRequest calls the generic PutWallet builder with application/json body
func NewPutWalletRequest(server string, params *PutWalletParams, body PutWalletJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWalletRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutWalletRequestWithBody generates requests for PutWallet with any type of body
func NewPutWalletRequestWithBody(server string, params *PutWalletParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wallet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWishlistRequest generates requests for DeleteWishlist
func NewDeleteWishlistRequest(server string, params *DeleteWishlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientID", runtime.ParamLocationQuery, params.ClientID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.GameID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, *params.GameID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWishlistRequest generates requests for GetWishlist
func NewGetWishlistRequest(server string, params *GetWishlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWishlistRequest generates requests for PostWishlist
func NewPostWishlistRequest(server string, params *PostWishlistParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlist")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientID", runtime.ParamLocationQuery, params.ClientID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "gameID", runtime.ParamLocationQuery, params.GameID); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetYourStoreRequest generates requests for GetYourStore
func NewGetYourStoreRequest(server string, params *GetYourStoreParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/yourStore")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PutAccess request with any body
	PutAccessWithBodyWithResponse(ctx context.Context, params *PutAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccessResponse, error)

	PutAccessWithResponse(ctx context.Context, params *PutAccessParams, body PutAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccessResponse, error)

	// GetAddBalance request
	GetAddBalanceWithResponse(ctx context.Context, params *GetAddBalanceParams, reqEditors ...RequestEditorFn) (*GetAddBalanceResponse, error)

	// GetAddress request
	GetAddressWithResponse(ctx context.Context, params *GetAddressParams, reqEditors ...RequestEditorFn) (*GetAddressResponse, error)

	// PutAddress request with any body
	PutAddressWithBodyWithResponse(ctx context.Context, params *PutAddressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAddressResponse, error)

	PutAddressWithResponse(ctx context.Context, params *PutAddressParams, body PutAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAddressResponse, error)

	// DeleteCart request
	DeleteCartWithResponse(ctx context.Context, params *DeleteCartParams, reqEditors ...RequestEditorFn) (*DeleteCartResponse, error)

	// GetCart request
	GetCartWithResponse(ctx context.Context, params *GetCartParams, reqEditors ...RequestEditorFn) (*GetCartResponse, error)

	// PostCart request
	PostCartWithResponse(ctx context.Context, params *PostCartParams, reqEditors ...RequestEditorFn) (*PostCartResponse, error)

	// GetCartPurchase request
	GetCartPurchaseWithResponse(ctx context.Context, params *GetCartPurchaseParams, reqEditors ...RequestEditorFn) (*GetCartPurchaseResponse, error)

	// DeleteClient request
	DeleteClientWithResponse(ctx context.Context, params *DeleteClientParams, reqEditors ...RequestEditorFn) (*DeleteClientResponse, error)

	// GetClient request
	GetClientWithResponse(ctx context.Context, params *GetClientParams, reqEditors ...RequestEditorFn) (*GetClientResponse, error)

	// PutClient request with any body
	PutClientWithBodyWithResponse(ctx context.Context, params *PutClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientResponse, error)

	PutClientWithResponse(ctx context.Context, params *PutClientParams, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientResponse, error)

	// DeleteGame request
	DeleteGameWithResponse(ctx context.Context, params *DeleteGameParams, reqEditors ...RequestEditorFn) (*DeleteGameResponse, error)

	// GetGame request
	GetGameWithResponse(ctx context.Context, params *GetGameParams, reqEditors ...RequestEditorFn) (*GetGameResponse, error)

	// PostGame request with any body
	PostGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGameResponse, error)

	PostGameWithResponse(ctx context.Context, body PostGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGameResponse, error)

	// PutGame request with any body
	PutGameWithBodyWithResponse(ctx context.Context, params *PutGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGameResponse, error)

	PutGameWithResponse(ctx context.Context, params *PutGameParams, body PutGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGameResponse, error)

	// DeleteGameImage request
	DeleteGameImageWithResponse(ctx context.Context, params *DeleteGameImageParams, reqEditors ...RequestEditorFn) (*DeleteGameImageResponse, error)

	// GetGameImage request
	GetGameImageWithResponse(ctx context.Context, params *GetGameImageParams, reqEditors ...RequestEditorFn) (*GetGameImageResponse, error)

	// PostGameImage request
	PostGameImageWithResponse(ctx context.Context, params *PostGameImageParams, reqEditors ...RequestEditorFn) (*PostGameImageResponse, error)

	// GetGameReviews request
	GetGameReviewsWithResponse(ctx context.Context, params *GetGameReviewsParams, reqEditors ...RequestEditorFn) (*GetGameReviewsResponse, error)

	// DeleteGameTag request
	DeleteGameTagWithResponse(ctx context.Context, params *DeleteGameTagParams, reqEditors ...RequestEditorFn) (*DeleteGameTagResponse, error)

	// GetGameTag request
	GetGameTagWithResponse(ctx context.Context, params *GetGameTagParams, reqEditors ...RequestEditorFn) (*GetGameTagResponse, error)

	// PostGameTag request
	PostGameTagWithResponse(ctx context.Context, params *PostGameTagParams, reqEditors ...RequestEditorFn) (*PostGameTagResponse, error)

	// GetHealth request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// GetInvoice request
	GetInvoiceWithResponse(ctx context.Context, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*GetInvoiceResponse, error)

	// GetLibrary request
	GetLibraryWithResponse(ctx context.Context, params *GetLibraryParams, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error)

	// PostLogin request with any body
	PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error)

	// GetNewStore request
	GetNewStoreWithResponse(ctx context.Context, params *GetNewStoreParams, reqEditors ...RequestEditorFn) (*GetNewStoreResponse, error)

	// DeleteNewsletter request
	DeleteNewsletterWithResponse(ctx context.Context, params *DeleteNewsletterParams, reqEditors ...RequestEditorFn) (*DeleteNewsletterResponse, error)

	// GetNewsletter request
	GetNewsletterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewsletterResponse, error)

	// PostNewsletter request
	PostNewsletterWithResponse(ctx context.Context, params *PostNewsletterParams, reqEditors ...RequestEditorFn) (*PostNewsletterResponse, error)

	// GetNoteworthyStore request
	GetNoteworthyStoreWithResponse(ctx context.Context, params *GetNoteworthyStoreParams, reqEditors ...RequestEditorFn) (*GetNoteworthyStoreResponse, error)

	// DeletePublisher request
	DeletePublisherWithResponse(ctx context.Context, params *DeletePublisherParams, reqEditors ...RequestEditorFn) (*DeletePublisherResponse, error)

	// GetPublisher request
	GetPublisherWithResponse(ctx context.Context, params *GetPublisherParams, reqEditors ...RequestEditorFn) (*GetPublisherResponse, error)

	// PostPublisher request with any body
	PostPublisherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResponse, error)

	PostPublisherWithResponse(ctx context.Context, body PostPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResponse, error)

	// PutPublisher request with any body
	PutPublisherWithBodyWithResponse(ctx context.Context, params *PutPublisherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPublisherResponse, error)

	PutPublisherWithResponse(ctx context.Context, params *PutPublisherParams, body PutPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPublisherResponse, error)

	// GetPublisherGames request
	GetPublisherGamesWithResponse(ctx context.Context, params *GetPublisherGamesParams, reqEditors ...RequestEditorFn) (*GetPublisherGamesResponse, error)

	// PostRegister request with any body
	PostRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error)

	PostRegisterWithResponse(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error)

	// DeleteReview request
	DeleteReviewWithResponse(ctx context.Context, params *DeleteReviewParams, reqEditors ...RequestEditorFn) (*DeleteReviewResponse, error)

	// PostReview request with any body
	PostReviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReviewResponse, error)

	PostReviewWithResponse(ctx context.Context, body PostReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReviewResponse, error)

	// PutReview request with any body
	PutReviewWithBodyWithResponse(ctx context.Context, params *PutReviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReviewResponse, error)

	PutReviewWithResponse(ctx context.Context, params *PutReviewParams, body PutReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReviewResponse, error)

	// GetSearchGame request
	GetSearchGameWithResponse(ctx context.Context, params *GetSearchGameParams, reqEditors ...RequestEditorFn) (*GetSearchGameResponse, error)

	// GetSearchHistory request
	GetSearchHistoryWithResponse(ctx context.Context, params *GetSearchHistoryParams, reqEditors ...RequestEditorFn) (*GetSearchHistoryResponse, error)

	// PostSearchHistory request
	PostSearchHistoryWithResponse(ctx context.Context, params *PostSearchHistoryParams, reqEditors ...RequestEditorFn) (*PostSearchHistoryResponse, error)

	// GetSearchTag request
	GetSearchTagWithResponse(ctx context.Context, params *GetSearchTagParams, reqEditors ...RequestEditorFn) (*GetSearchTagResponse, error)

	// DeleteTag request
	DeleteTagWithResponse(ctx context.Context, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error)

	// GetTag request
	GetTagWithResponse(ctx context.Context, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error)

	// PostTag request with any body
	PostTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagResponse, error)

	PostTagWithResponse(ctx context.Context, body PostTagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagResponse, error)

	// PutTag request with any body
	PutTagWithBodyWithResponse(ctx context.Context, params *PutTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTagResponse, error)

	PutTagWithResponse(ctx context.Context, params *PutTagParams, body PutTagJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTagResponse, error)

	// GetTopReviews request
	GetTopReviewsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopReviewsResponse, error)

	// GetWallet request
	GetWalletWithResponse(ctx context.Context, params *GetWalletParams, reqEditors ...RequestEditorFn) (*GetWalletResponse, error)

	// PutWallet request with any body
	PutWalletWithBodyWithResponse(ctx context.Context, params *PutWalletParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWalletResponse, error)

	PutWalletWithResponse(ctx context.Context, params *PutWalletParams, body PutWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWalletResponse, error)

	// DeleteWishlist request
	DeleteWishlistWithResponse(ctx context.Context, params *DeleteWishlistParams, reqEditors ...RequestEditorFn) (*DeleteWishlistResponse, error)

	// GetWishlist request
	GetWishlistWithResponse(ctx context.Context, params *GetWishlistParams, reqEditors ...RequestEditorFn) (*GetWishlistResponse, error)

	// PostWishlist request
	PostWishlistWithResponse(ctx context.Context, params *PostWishlistParams, reqEditors ...RequestEditorFn) (*PostWishlistResponse, error)

	// GetYourStore request
	GetYourStoreWithResponse(ctx context.Context, params *GetYourStoreParams, reqEditors ...RequestEditorFn) (*GetYourStoreResponse, error)
}

type PutAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientWalletSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetAddBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientAddressSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientAddressSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteCartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetCartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostCartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCartPurchaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InvoiceSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetCartPurchaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCartPurchaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClientSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGameImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameImageSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteGameImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGameImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGameImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameImageSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetGameImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGameImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGameImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostGameImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGameImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGameReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReviewSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetGameReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGameReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGameTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteGameTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGameTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGameTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetGameTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGameTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGameTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostGameTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGameTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]InvoiceSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLibraryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetLibraryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLibraryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewStoreSchema
}

// Status returns HTTPResponse.Status
func (r GetNewStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNewsletterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NewsletterSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteNewsletterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNewsletterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewsletterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]NewsletterSchema
}

// Status returns HTTPResponse.Status
func (r GetNewsletterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewsletterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNewsletterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostNewsletterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNewsletterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNoteworthyStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NoteworthyStoreSchema
}

// Status returns HTTPResponse.Status
func (r GetNoteworthyStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNoteworthyStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePublisherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublisherSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeletePublisherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePublisherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublisherSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetPublisherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPublisherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublisherSchema
	JSON400      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostPublisherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPublisherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPublisherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublisherSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutPublisherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPublisherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublisherGamesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetPublisherGamesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublisherGamesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReviewSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReviewSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutReviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReviewSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutReviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutReviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchGameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameSchema
}

// Status returns HTTPResponse.Status
func (r GetSearchGameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchGameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SearchSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetSearchHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSearchHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostSearchHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSearchHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSearchTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagSchema
}

// Status returns HTTPResponse.Status
func (r GetSearchTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSearchTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TagSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TagSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameSchema
}

// Status returns HTTPResponse.Status
func (r GetTopReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWalletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientWalletSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetWalletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWalletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWalletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClientWalletSchema
	JSON400      *ErrorSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PutWalletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWalletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWishlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r DeleteWishlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWishlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWishlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]GameSchema
	JSON404      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r GetWishlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWishlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWishlistResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorSchema
	JSON409      *ErrorSchema
}

// Status returns HTTPResponse.Status
func (r PostWishlistResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWishlistResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetYourStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *YourStoreSchema
}

// Status returns HTTPResponse.Status
func (r GetYourStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetYourStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PutAccessWithBodyWithResponse request with arbitrary body returning *PutAccessResponse
func (c *ClientWithResponses) PutAccessWithBodyWithResponse(ctx context.Context, params *PutAccessParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccessResponse, error) {
	rsp, err := c.PutAccessWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccessResponse(rsp)
}

func (c *ClientWithResponses) PutAccessWithResponse(ctx context.Context, params *PutAccessParams, body PutAccessJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccessResponse, error) {
	rsp, err := c.PutAccess(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccessResponse(rsp)
}

// GetAddBalanceWithResponse request returning *GetAddBalanceResponse
func (c *ClientWithResponses) GetAddBalanceWithResponse(ctx context.Context, params *GetAddBalanceParams, reqEditors ...RequestEditorFn) (*GetAddBalanceResponse, error) {
	rsp, err := c.GetAddBalance(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddBalanceResponse(rsp)
}

// GetAddressWithResponse request returning *GetAddressResponse
func (c *ClientWithResponses) GetAddressWithResponse(ctx context.Context, params *GetAddressParams, reqEditors ...RequestEditorFn) (*GetAddressResponse, error) {
	rsp, err := c.GetAddress(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddressResponse(rsp)
}

// PutAddressWithBodyWithResponse request with arbitrary body returning *PutAddressResponse
func (c *ClientWithResponses) PutAddressWithBodyWithResponse(ctx context.Context, params *PutAddressParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAddressResponse, error) {
	rsp, err := c.PutAddressWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAddressResponse(rsp)
}

func (c *ClientWithResponses) PutAddressWithResponse(ctx context.Context, params *PutAddressParams, body PutAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAddressResponse, error) {
	rsp, err := c.PutAddress(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAddressResponse(rsp)
}

// DeleteCartWithResponse request returning *DeleteCartResponse
func (c *ClientWithResponses) DeleteCartWithResponse(ctx context.Context, params *DeleteCartParams, reqEditors ...RequestEditorFn) (*DeleteCartResponse, error) {
	rsp, err := c.DeleteCart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCartResponse(rsp)
}

// GetCartWithResponse request returning *GetCartResponse
func (c *ClientWithResponses) GetCartWithResponse(ctx context.Context, params *GetCartParams, reqEditors ...RequestEditorFn) (*GetCartResponse, error) {
	rsp, err := c.GetCart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCartResponse(rsp)
}

// PostCartWithResponse request returning *PostCartResponse
func (c *ClientWithResponses) PostCartWithResponse(ctx context.Context, params *PostCartParams, reqEditors ...RequestEditorFn) (*PostCartResponse, error) {
	rsp, err := c.PostCart(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCartResponse(rsp)
}

// GetCartPurchaseWithResponse request returning *GetCartPurchaseResponse
func (c *ClientWithResponses) GetCartPurchaseWithResponse(ctx context.Context, params *GetCartPurchaseParams, reqEditors ...RequestEditorFn) (*GetCartPurchaseResponse, error) {
	rsp, err := c.GetCartPurchase(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCartPurchaseResponse(rsp)
}

// DeleteClientWithResponse request returning *DeleteClientResponse
func (c *ClientWithResponses) DeleteClientWithResponse(ctx context.Context, params *DeleteClientParams, reqEditors ...RequestEditorFn) (*DeleteClientResponse, error) {
	rsp, err := c.DeleteClient(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientResponse(rsp)
}

// GetClientWithResponse request returning *GetClientResponse
func (c *ClientWithResponses) GetClientWithResponse(ctx context.Context, params *GetClientParams, reqEditors ...RequestEditorFn) (*GetClientResponse, error) {
	rsp, err := c.GetClient(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClientResponse(rsp)
}

// PutClientWithBodyWithResponse request with arbitrary body returning *PutClientResponse
func (c *ClientWithResponses) PutClientWithBodyWithResponse(ctx context.Context, params *PutClientParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutClientResponse, error) {
	rsp, err := c.PutClientWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientResponse(rsp)
}

func (c *ClientWithResponses) PutClientWithResponse(ctx context.Context, params *PutClientParams, body PutClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutClientResponse, error) {
	rsp, err := c.PutClient(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutClientResponse(rsp)
}

// DeleteGameWithResponse request returning *DeleteGameResponse
func (c *ClientWithResponses) DeleteGameWithResponse(ctx context.Context, params *DeleteGameParams, reqEditors ...RequestEditorFn) (*DeleteGameResponse, error) {
	rsp, err := c.DeleteGame(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGameResponse(rsp)
}

// GetGameWithResponse request returning *GetGameResponse
func (c *ClientWithResponses) GetGameWithResponse(ctx context.Context, params *GetGameParams, reqEditors ...RequestEditorFn) (*GetGameResponse, error) {
	rsp, err := c.GetGame(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGameResponse(rsp)
}

// PostGameWithBodyWithResponse request with arbitrary body returning *PostGameResponse
func (c *ClientWithResponses) PostGameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGameResponse, error) {
	rsp, err := c.PostGameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameResponse(rsp)
}

func (c *ClientWithResponses) PostGameWithResponse(ctx context.Context, body PostGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGameResponse, error) {
	rsp, err := c.PostGame(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameResponse(rsp)
}

// PutGameWithBodyWithResponse request with arbitrary body returning *PutGameResponse
func (c *ClientWithResponses) PutGameWithBodyWithResponse(ctx context.Context, params *PutGameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGameResponse, error) {
	rsp, err := c.PutGameWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGameResponse(rsp)
}

func (c *ClientWithResponses) PutGameWithResponse(ctx context.Context, params *PutGameParams, body PutGameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGameResponse, error) {
	rsp, err := c.PutGame(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGameResponse(rsp)
}

// DeleteGameImageWithResponse request returning *DeleteGameImageResponse
func (c *ClientWithResponses) DeleteGameImageWithResponse(ctx context.Context, params *DeleteGameImageParams, reqEditors ...RequestEditorFn) (*DeleteGameImageResponse, error) {
	rsp, err := c.DeleteGameImage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGameImageResponse(rsp)
}

// GetGameImageWithResponse request returning *GetGameImageResponse
func (c *ClientWithResponses) GetGameImageWithResponse(ctx context.Context, params *GetGameImageParams, reqEditors ...RequestEditorFn) (*GetGameImageResponse, error) {
	rsp, err := c.GetGameImage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGameImageResponse(rsp)
}

// PostGameImageWithResponse request returning *PostGameImageResponse
func (c *ClientWithResponses) PostGameImageWithResponse(ctx context.Context, params *PostGameImageParams, reqEditors ...RequestEditorFn) (*PostGameImageResponse, error) {
	rsp, err := c.PostGameImage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameImageResponse(rsp)
}

// GetGameReviewsWithResponse request returning *GetGameReviewsResponse
func (c *ClientWithResponses) GetGameReviewsWithResponse(ctx context.Context, params *GetGameReviewsParams, reqEditors ...RequestEditorFn) (*GetGameReviewsResponse, error) {
	rsp, err := c.GetGameReviews(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGameReviewsResponse(rsp)
}

// DeleteGameTagWithResponse request returning *DeleteGameTagResponse
func (c *ClientWithResponses) DeleteGameTagWithResponse(ctx context.Context, params *DeleteGameTagParams, reqEditors ...RequestEditorFn) (*DeleteGameTagResponse, error) {
	rsp, err := c.DeleteGameTag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGameTagResponse(rsp)
}

// GetGameTagWithResponse request returning *GetGameTagResponse
func (c *ClientWithResponses) GetGameTagWithResponse(ctx context.Context, params *GetGameTagParams, reqEditors ...RequestEditorFn) (*GetGameTagResponse, error) {
	rsp, err := c.GetGameTag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGameTagResponse(rsp)
}

// PostGameTagWithResponse request returning *PostGameTagResponse
func (c *ClientWithResponses) PostGameTagWithResponse(ctx context.Context, params *PostGameTagParams, reqEditors ...RequestEditorFn) (*PostGameTagResponse, error) {
	rsp, err := c.PostGameTag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGameTagResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// GetInvoiceWithResponse request returning *GetInvoiceResponse
func (c *ClientWithResponses) GetInvoiceWithResponse(ctx context.Context, params *GetInvoiceParams, reqEditors ...RequestEditorFn) (*GetInvoiceResponse, error) {
	rsp, err := c.GetInvoice(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceResponse(rsp)
}

// GetLibraryWithResponse request returning *GetLibraryResponse
func (c *ClientWithResponses) GetLibraryWithResponse(ctx context.Context, params *GetLibraryParams, reqEditors ...RequestEditorFn) (*GetLibraryResponse, error) {
	rsp, err := c.GetLibrary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLibraryResponse(rsp)
}

// PostLoginWithBodyWithResponse request with arbitrary body returning *PostLoginResponse
func (c *ClientWithResponses) PostLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

func (c *ClientWithResponses) PostLoginWithResponse(ctx context.Context, body PostLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLoginResponse, error) {
	rsp, err := c.PostLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLoginResponse(rsp)
}

// GetNewStoreWithResponse request returning *GetNewStoreResponse
func (c *ClientWithResponses) GetNewStoreWithResponse(ctx context.Context, params *GetNewStoreParams, reqEditors ...RequestEditorFn) (*GetNewStoreResponse, error) {
	rsp, err := c.GetNewStore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewStoreResponse(rsp)
}

// DeleteNewsletterWithResponse request returning *DeleteNewsletterResponse
func (c *ClientWithResponses) DeleteNewsletterWithResponse(ctx context.Context, params *DeleteNewsletterParams, reqEditors ...RequestEditorFn) (*DeleteNewsletterResponse, error) {
	rsp, err := c.DeleteNewsletter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNewsletterResponse(rsp)
}

// GetNewsletterWithResponse request returning *GetNewsletterResponse
func (c *ClientWithResponses) GetNewsletterWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewsletterResponse, error) {
	rsp, err := c.GetNewsletter(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewsletterResponse(rsp)
}

// PostNewsletterWithResponse request returning *PostNewsletterResponse
func (c *ClientWithResponses) PostNewsletterWithResponse(ctx context.Context, params *PostNewsletterParams, reqEditors ...RequestEditorFn) (*PostNewsletterResponse, error) {
	rsp, err := c.PostNewsletter(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewsletterResponse(rsp)
}

// GetNoteworthyStoreWithResponse request returning *GetNoteworthyStoreResponse
func (c *ClientWithResponses) GetNoteworthyStoreWithResponse(ctx context.Context, params *GetNoteworthyStoreParams, reqEditors ...RequestEditorFn) (*GetNoteworthyStoreResponse, error) {
	rsp, err := c.GetNoteworthyStore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNoteworthyStoreResponse(rsp)
}

// DeletePublisherWithResponse request returning *DeletePublisherResponse
func (c *ClientWithResponses) DeletePublisherWithResponse(ctx context.Context, params *DeletePublisherParams, reqEditors ...RequestEditorFn) (*DeletePublisherResponse, error) {
	rsp, err := c.DeletePublisher(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePublisherResponse(rsp)
}

// GetPublisherWithResponse request returning *GetPublisherResponse
func (c *ClientWithResponses) GetPublisherWithResponse(ctx context.Context, params *GetPublisherParams, reqEditors ...RequestEditorFn) (*GetPublisherResponse, error) {
	rsp, err := c.GetPublisher(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherResponse(rsp)
}

// PostPublisherWithBodyWithResponse request with arbitrary body returning *PostPublisherResponse
func (c *ClientWithResponses) PostPublisherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPublisherResponse, error) {
	rsp, err := c.PostPublisherWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResponse(rsp)
}

func (c *ClientWithResponses) PostPublisherWithResponse(ctx context.Context, body PostPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPublisherResponse, error) {
	rsp, err := c.PostPublisher(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPublisherResponse(rsp)
}

// PutPublisherWithBodyWithResponse request with arbitrary body returning *PutPublisherResponse
func (c *ClientWithResponses) PutPublisherWithBodyWithResponse(ctx context.Context, params *PutPublisherParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPublisherResponse, error) {
	rsp, err := c.PutPublisherWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPublisherResponse(rsp)
}

func (c *ClientWithResponses) PutPublisherWithResponse(ctx context.Context, params *PutPublisherParams, body PutPublisherJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPublisherResponse, error) {
	rsp, err := c.PutPublisher(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPublisherResponse(rsp)
}

// GetPublisherGamesWithResponse request returning *GetPublisherGamesResponse
func (c *ClientWithResponses) GetPublisherGamesWithResponse(ctx context.Context, params *GetPublisherGamesParams, reqEditors ...RequestEditorFn) (*GetPublisherGamesResponse, error) {
	rsp, err := c.GetPublisherGames(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPublisherGamesResponse(rsp)
}

// PostRegisterWithBodyWithResponse request with arbitrary body returning *PostRegisterResponse
func (c *ClientWithResponses) PostRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error) {
	rsp, err := c.PostRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostRegisterWithResponse(ctx context.Context, body PostRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegisterResponse, error) {
	rsp, err := c.PostRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegisterResponse(rsp)
}

// DeleteReviewWithResponse request returning *DeleteReviewResponse
func (c *ClientWithResponses) DeleteReviewWithResponse(ctx context.Context, params *DeleteReviewParams, reqEditors ...RequestEditorFn) (*DeleteReviewResponse, error) {
	rsp, err := c.DeleteReview(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReviewResponse(rsp)
}

// PostReviewWithBodyWithResponse request with arbitrary body returning *PostReviewResponse
func (c *ClientWithResponses) PostReviewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostReviewResponse, error) {
	rsp, err := c.PostReviewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReviewResponse(rsp)
}

func (c *ClientWithResponses) PostReviewWithResponse(ctx context.Context, body PostReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PostReviewResponse, error) {
	rsp, err := c.PostReview(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostReviewResponse(rsp)
}

// PutReviewWithBodyWithResponse request with arbitrary body returning *PutReviewResponse
func (c *ClientWithResponses) PutReviewWithBodyWithResponse(ctx context.Context, params *PutReviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutReviewResponse, error) {
	rsp, err := c.PutReviewWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReviewResponse(rsp)
}

func (c *ClientWithResponses) PutReviewWithResponse(ctx context.Context, params *PutReviewParams, body PutReviewJSONRequestBody, reqEditors ...RequestEditorFn) (*PutReviewResponse, error) {
	rsp, err := c.PutReview(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutReviewResponse(rsp)
}

// GetSearchGameWithResponse request returning *GetSearchGameResponse
func (c *ClientWithResponses) GetSearchGameWithResponse(ctx context.Context, params *GetSearchGameParams, reqEditors ...RequestEditorFn) (*GetSearchGameResponse, error) {
	rsp, err := c.GetSearchGame(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchGameResponse(rsp)
}

// GetSearchHistoryWithResponse request returning *GetSearchHistoryResponse
func (c *ClientWithResponses) GetSearchHistoryWithResponse(ctx context.Context, params *GetSearchHistoryParams, reqEditors ...RequestEditorFn) (*GetSearchHistoryResponse, error) {
	rsp, err := c.GetSearchHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchHistoryResponse(rsp)
}

// PostSearchHistoryWithResponse request returning *PostSearchHistoryResponse
func (c *ClientWithResponses) PostSearchHistoryWithResponse(ctx context.Context, params *PostSearchHistoryParams, reqEditors ...RequestEditorFn) (*PostSearchHistoryResponse, error) {
	rsp, err := c.PostSearchHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSearchHistoryResponse(rsp)
}

// GetSearchTagWithResponse request returning *GetSearchTagResponse
func (c *ClientWithResponses) GetSearchTagWithResponse(ctx context.Context, params *GetSearchTagParams, reqEditors ...RequestEditorFn) (*GetSearchTagResponse, error) {
	rsp, err := c.GetSearchTag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSearchTagResponse(rsp)
}

// DeleteTagWithResponse request returning *DeleteTagResponse
func (c *ClientWithResponses) DeleteTagWithResponse(ctx context.Context, params *DeleteTagParams, reqEditors ...RequestEditorFn) (*DeleteTagResponse, error) {
	rsp, err := c.DeleteTag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagResponse(rsp)
}

// GetTagWithResponse request returning *GetTagResponse
func (c *ClientWithResponses) GetTagWithResponse(ctx context.Context, params *GetTagParams, reqEditors ...RequestEditorFn) (*GetTagResponse, error) {
	rsp, err := c.GetTag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagResponse(rsp)
}

// PostTagWithBodyWithResponse request with arbitrary body returning *PostTagResponse
func (c *ClientWithResponses) PostTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagResponse, error) {
	rsp, err := c.PostTagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagResponse(rsp)
}

func (c *ClientWithResponses) PostTagWithResponse(ctx context.Context, body PostTagJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagResponse, error) {
	rsp, err := c.PostTag(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagResponse(rsp)
}

// PutTagWithBodyWithResponse request with arbitrary body returning *PutTagResponse
func (c *ClientWithResponses) PutTagWithBodyWithResponse(ctx context.Context, params *PutTagParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTagResponse, error) {
	rsp, err := c.PutTagWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTagResponse(rsp)
}

func (c *ClientWithResponses) PutTagWithResponse(ctx context.Context, params *PutTagParams, body PutTagJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTagResponse, error) {
	rsp, err := c.PutTag(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTagResponse(rsp)
}

// GetTopReviewsWithResponse request returning *GetTopReviewsResponse
func (c *ClientWithResponses) GetTopReviewsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopReviewsResponse, error) {
	rsp, err := c.GetTopReviews(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopReviewsResponse(rsp)
}

// GetWalletWithResponse request returning *GetWalletResponse
func (c *ClientWithResponses) GetWalletWithResponse(ctx context.Context, params *GetWalletParams, reqEditors ...RequestEditorFn) (*GetWalletResponse, error) {
	rsp, err := c.GetWallet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWalletResponse(rsp)
}

// PutWalletWithBodyWithResponse request with arbitrary body returning *PutWalletResponse
func (c *ClientWithResponses) PutWalletWithBodyWithResponse(ctx context.Context, params *PutWalletParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWalletResponse, error) {
	rsp, err := c.PutWalletWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWalletResponse(rsp)
}

func (c *ClientWithResponses) PutWalletWithResponse(ctx context.Context, params *PutWalletParams, body PutWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWalletResponse, error) {
	rsp, err := c.PutWallet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWalletResponse(rsp)
}

// DeleteWishlistWithResponse request returning *DeleteWishlistResponse
func (c *ClientWithResponses) DeleteWishlistWithResponse(ctx context.Context, params *DeleteWishlistParams, reqEditors ...RequestEditorFn) (*DeleteWishlistResponse, error) {
	rsp, err := c.DeleteWishlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWishlistResponse(rsp)
}

// GetWishlistWithResponse request returning *GetWishlistResponse
func (c *ClientWithResponses) GetWishlistWithResponse(ctx context.Context, params *GetWishlistParams, reqEditors ...RequestEditorFn) (*GetWishlistResponse, error) {
	rsp, err := c.GetWishlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWishlistResponse(rsp)
}

// PostWishlistWithResponse request returning *PostWishlistResponse
func (c *ClientWithResponses) PostWishlistWithResponse(ctx context.Context, params *PostWishlistParams, reqEditors ...RequestEditorFn) (*PostWishlistResponse, error) {
	rsp, err := c.PostWishlist(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWishlistResponse(rsp)
}

// GetYourStoreWithResponse request returning *GetYourStoreResponse
func (c *ClientWithResponses) GetYourStoreWithResponse(ctx context.Context, params *GetYourStoreParams, reqEditors ...RequestEditorFn) (*GetYourStoreResponse, error) {
	rsp, err := c.GetYourStore(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetYourStoreResponse(rsp)
}

// ParsePutAccessResponse parses an HTTP response from a PutAccessWithResponse call
func ParsePutAccessResponse(rsp *http.Response) (*PutAccessResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAddBalanceResponse parses an HTTP response from a GetAddBalanceWithResponse call
func ParseGetAddBalanceResponse(rsp *http.Response) (*GetAddBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientWalletSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetAddressResponse parses an HTTP response from a GetAddressWithResponse call
func ParseGetAddressResponse(rsp *http.Response) (*GetAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientAddressSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutAddressResponse parses an HTTP response from a PutAddressWithResponse call
func ParsePutAddressResponse(rsp *http.Response) (*PutAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientAddressSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteCartResponse parses an HTTP response from a DeleteCartWithResponse call
func ParseDeleteCartResponse(rsp *http.Response) (*DeleteCartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCartResponse parses an HTTP response from a GetCartWithResponse call
func ParseGetCartResponse(rsp *http.Response) (*GetCartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostCartResponse parses an HTTP response from a PostCartWithResponse call
func ParsePostCartResponse(rsp *http.Response) (*PostCartResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetCartPurchaseResponse parses an HTTP response from a GetCartPurchaseWithResponse call
func ParseGetCartPurchaseResponse(rsp *http.Response) (*GetCartPurchaseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCartPurchaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InvoiceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteClientResponse parses an HTTP response from a DeleteClientWithResponse call
func ParseDeleteClientResponse(rsp *http.Response) (*DeleteClientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetClientResponse parses an HTTP response from a GetClientWithResponse call
func ParseGetClientResponse(rsp *http.Response) (*GetClientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClientSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutClientResponse parses an HTTP response from a PutClientWithResponse call
func ParsePutClientResponse(rsp *http.Response) (*PutClientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteGameResponse parses an HTTP response from a DeleteGameWithResponse call
func ParseDeleteGameResponse(rsp *http.Response) (*DeleteGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetGameResponse parses an HTTP response from a GetGameWithResponse call
func ParseGetGameResponse(rsp *http.Response) (*GetGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGameResponse parses an HTTP response from a PostGameWithResponse call
func ParsePostGameResponse(rsp *http.Response) (*PostGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutGameResponse parses an HTTP response from a PutGameWithResponse call
func ParsePutGameResponse(rsp *http.Response) (*PutGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteGameImageResponse parses an HTTP response from a DeleteGameImageWithResponse call
func ParseDeleteGameImageResponse(rsp *http.Response) (*DeleteGameImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGameImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameImageSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetGameImageResponse parses an HTTP response from a GetGameImageWithResponse call
func ParseGetGameImageResponse(rsp *http.Response) (*GetGameImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGameImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameImageSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGameImageResponse parses an HTTP response from a PostGameImageWithResponse call
func ParsePostGameImageResponse(rsp *http.Response) (*PostGameImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGameImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetGameReviewsResponse parses an HTTP response from a GetGameReviewsWithResponse call
func ParseGetGameReviewsResponse(rsp *http.Response) (*GetGameReviewsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGameReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReviewSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteGameTagResponse parses an HTTP response from a DeleteGameTagWithResponse call
func ParseDeleteGameTagResponse(rsp *http.Response) (*DeleteGameTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGameTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetGameTagResponse parses an HTTP response from a GetGameTagWithResponse call
func ParseGetGameTagResponse(rsp *http.Response) (*GetGameTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGameTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostGameTagResponse parses an HTTP response from a PostGameTagWithResponse call
func ParsePostGameTagResponse(rsp *http.Response) (*PostGameTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGameTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInvoiceResponse parses an HTTP response from a GetInvoiceWithResponse call
func ParseGetInvoiceResponse(rsp *http.Response) (*GetInvoiceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []InvoiceSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetLibraryResponse parses an HTTP response from a GetLibraryWithResponse call
func ParseGetLibraryResponse(rsp *http.Response) (*GetLibraryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLibraryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostLoginResponse parses an HTTP response from a PostLoginWithResponse call
func ParsePostLoginResponse(rsp *http.Response) (*PostLoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetNewStoreResponse parses an HTTP response from a GetNewStoreWithResponse call
func ParseGetNewStoreResponse(rsp *http.Response) (*GetNewStoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewStoreSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteNewsletterResponse parses an HTTP response from a DeleteNewsletterWithResponse call
func ParseDeleteNewsletterResponse(rsp *http.Response) (*DeleteNewsletterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNewsletterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NewsletterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetNewsletterResponse parses an HTTP response from a GetNewsletterWithResponse call
func ParseGetNewsletterResponse(rsp *http.Response) (*GetNewsletterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewsletterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []NewsletterSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNewsletterResponse parses an HTTP response from a PostNewsletterWithResponse call
func ParsePostNewsletterResponse(rsp *http.Response) (*PostNewsletterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNewsletterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetNoteworthyStoreResponse parses an HTTP response from a GetNoteworthyStoreWithResponse call
func ParseGetNoteworthyStoreResponse(rsp *http.Response) (*GetNoteworthyStoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNoteworthyStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NoteworthyStoreSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeletePublisherResponse parses an HTTP response from a DeletePublisherWithResponse call
func ParseDeletePublisherResponse(rsp *http.Response) (*DeletePublisherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePublisherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublisherSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPublisherResponse parses an HTTP response from a GetPublisherWithResponse call
func ParseGetPublisherResponse(rsp *http.Response) (*GetPublisherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublisherSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostPublisherResponse parses an HTTP response from a PostPublisherWithResponse call
func ParsePostPublisherResponse(rsp *http.Response) (*PostPublisherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPublisherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublisherSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePutPublisherResponse parses an HTTP response from a PutPublisherWithResponse call
func ParsePutPublisherResponse(rsp *http.Response) (*PutPublisherResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPublisherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublisherSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPublisherGamesResponse parses an HTTP response from a GetPublisherGamesWithResponse call
func ParseGetPublisherGamesResponse(rsp *http.Response) (*GetPublisherGamesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPublisherGamesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRegisterResponse parses an HTTP response from a PostRegisterWithResponse call
func ParsePostRegisterResponse(rsp *http.Response) (*PostRegisterResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteReviewResponse parses an HTTP response from a DeleteReviewWithResponse call
func ParseDeleteReviewResponse(rsp *http.Response) (*DeleteReviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReviewSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostReviewResponse parses an HTTP response from a PostReviewWithResponse call
func ParsePostReviewResponse(rsp *http.Response) (*PostReviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReviewSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutReviewResponse parses an HTTP response from a PutReviewWithResponse call
func ParsePutReviewResponse(rsp *http.Response) (*PutReviewResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutReviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReviewSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSearchGameResponse parses an HTTP response from a GetSearchGameWithResponse call
func ParseGetSearchGameResponse(rsp *http.Response) (*GetSearchGameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchGameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSearchHistoryResponse parses an HTTP response from a GetSearchHistoryWithResponse call
func ParseGetSearchHistoryResponse(rsp *http.Response) (*GetSearchHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SearchSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSearchHistoryResponse parses an HTTP response from a PostSearchHistoryWithResponse call
func ParsePostSearchHistoryResponse(rsp *http.Response) (*PostSearchHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSearchHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSearchTagResponse parses an HTTP response from a GetSearchTagWithResponse call
func ParseGetSearchTagResponse(rsp *http.Response) (*GetSearchTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSearchTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTagResponse parses an HTTP response from a DeleteTagWithResponse call
func ParseDeleteTagResponse(rsp *http.Response) (*DeleteTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TagSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTagResponse parses an HTTP response from a GetTagWithResponse call
func ParseGetTagResponse(rsp *http.Response) (*GetTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TagSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostTagResponse parses an HTTP response from a PostTagWithResponse call
func ParsePostTagResponse(rsp *http.Response) (*PostTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePutTagResponse parses an HTTP response from a PutTagWithResponse call
func ParsePutTagResponse(rsp *http.Response) (*PutTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetTopReviewsResponse parses an HTTP response from a GetTopReviewsWithResponse call
func ParseGetTopReviewsResponse(rsp *http.Response) (*GetTopReviewsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWalletResponse parses an HTTP response from a GetWalletWithResponse call
func ParseGetWalletResponse(rsp *http.Response) (*GetWalletResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWalletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientWalletSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutWalletResponse parses an HTTP response from a PutWalletWithResponse call
func ParsePutWalletResponse(rsp *http.Response) (*PutWalletResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWalletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClientWalletSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWishlistResponse parses an HTTP response from a DeleteWishlistWithResponse call
func ParseDeleteWishlistResponse(rsp *http.Response) (*DeleteWishlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWishlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWishlistResponse parses an HTTP response from a GetWishlistWithResponse call
func ParseGetWishlistResponse(rsp *http.Response) (*GetWishlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWishlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []GameSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostWishlistResponse parses an HTTP response from a PostWishlistWithResponse call
func ParsePostWishlistResponse(rsp *http.Response) (*PostWishlistResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWishlistResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetYourStoreResponse parses an HTTP response from a GetYourStoreWithResponse call
func ParseGetYourStoreResponse(rsp *http.Response) (*GetYourStoreResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetYourStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest YourStoreSchema
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

